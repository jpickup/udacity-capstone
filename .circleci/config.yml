version: 2.1

executors:
  java17:
    docker:
      - image: 'cimg/openjdk:17.0'

orbs:
  maven: circleci/maven@1.4.1
  docker: circleci/docker@2.2.0
  kubernetes: circleci/kubernetes@1.3.1  

commands:
  destroy-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying udaroute EKS cluster stack: udaroute-eks-cluster"
            #Disabled for now
            #aws cloudformation delete-stack --stack-name udaroute-eks-cluster

jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.16.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm --version
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-frontend:
    docker:
      - image: cimg/node:18.16.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  lint-frontend:
    docker:
      - image: cimg/node:18.16.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run lint

  build-backend:
    executor: java17
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
           keys: [backend-build]      
      - run: 
          name: Get AWS password 
          command: |
            cd backend
            aws ecr get-login-password --region us-east-1 > aws-password.txt
            cat aws-password.txt
      - run:
          name: Create updated application.properties file
          command: |
            echo "Updating application.properties file in backend/application.properties"
            cd backend
            echo amazon.dynamodb.endpoint=$amazon_dynamodb_endpoint > application.properties
            echo amazon.aws.accesskey=$amazon_aws_accesskey >> application.properties
            echo amazon.aws.secretkey=$amazon_aws_secretkey >> application.properties
            echo google.elevation.api.key=${google_elevation_api_key} >> application.properties
            echo google.elevation.api.url=${google_elevation_api_url} >> application.properties
            cat application.properties
            cp application.properties business/src/main/resources/
      - run:
          name: Compile and Test
          command: |
            cd backend
            mkdir docker
            mvn clean test install
            ls -l business/docker
      - run:
          name: Build docker image
          command: |
            cd backend
            docker build --tag=udaroute:${CIRCLE_BUILD_NUM} .
      - run:
          name: Upload docker image to ECR
          command: |
            cd backend
            cat aws-password.txt
            ls -l business/docker
            cat aws-password.txt | docker login --username AWS --password-stdin $ecr_home
            ecrpath=$ecr_home/udaroute:${CIRCLE_BUILD_NUM}
            echo "ERC ID and Image: $ecrpath"
            docker tag udaroute:${CIRCLE_BUILD_NUM} $ecrpath
            docker push $ecrpath
            echo $ecrpath > ~/ecr-path.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - ecr-path.txt

  lint-backend:
    executor: java17
    steps:
      - checkout
      - restore_cache:
           keys: [docker-build]      
      - run:
          name: Checkstyle
          command: |
            cd backend
            mvn compile checkstyle:checkstyle

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup Kubernetes Cluster
          no_output_timeout: 20m
          command: |
            # aws cloudformation deploy \
            #   --template-file aws/cloudformation/eks-cluster-and-nodes.yaml \
            #   --tags project=udaroute \
            #   --capabilities CAPABILITY_NAMED_IAM \
            #   --stack-name udaroute-eks-cluster
            echo Disabled for now
      # Destroy environment on failure
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend to EKS cluster
          command: |
            aws eks update-kubeconfig --region us-east-1 --name udaroute
            existing_deployment=$(kubectl get deployment udaroute-deployment --ignore-not-found)
            if [ -z "$existing_deployment" ]
            then
              echo "Creating new deployment"
              kubectl create -f aws/kubernetes/udaroute-deployment.yaml
              kubectl expose deployment udaroute-deployment --type=LoadBalancer --name=udaroute-service --port=8081
            else
              ecrpath=$(cat ~/ecr-path.txt)
              echo "Deployment already exists, updating image to $ecrpath"
              kubectl set image deployment/udaroute-deployment udaroute=$ecrpath
            fi

  deploy-frontend-config:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: yum install -y tar gzip
      - restore_cache:
          keys: [backend-build, frontend-build]   
      - run:
          name: Create vue config file
          command: |
            aws eks update-kubeconfig --region us-east-1 --name udaroute
            export LOAD_BALANCER_IP="$(kubectl get services udaroute-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
            export VUE_APP_ROUTE_SERVER_URI=http://${LOAD_BALANCER_IP}:8081
            echo "Exposed URL: $VUE_APP_ROUTE_SERVER_URI"
            echo $VUE_APP_ROUTE_SERVER_URI
            echo Creating config file
            echo "{"                                                              > frontend/public/config.json
            echo "  \"VUE_APP_ROUTE_SERVER_URI\": \"$VUE_APP_ROUTE_SERVER_URI\"" >> frontend/public/config.json
            echo "  \"VUE_APP_MAPTILER_KEY\": \"$maptiler_key\""                 >> frontend/public/config.json
            echo "  \"VUE_APP_GOOGLE_CLIENT_ID\": \"$google_elevation_api_key\"" >> frontend/public/config.json
            echo "}"                                                             >> frontend/public/config.json
            cat frontend/public/config.json
            aws s3 cp frontend/public/config.json s3://udaroute

  deploy-frontend:
    docker:
      - image: cimg/node:18.16.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]   
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy to S3 bucket
          command: |
            cat frontend/public/config.json
            echo "Deploy to S3 bucket..."
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udaroute --recursive

workflows:
  default:
    jobs:
      - build-backend
      - lint-backend:
          requires: [build-backend]
      - deploy-infrastructure
      - deploy-backend:
          requires: [build-backend, deploy-infrastructure]
      - build-frontend
      - lint-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-frontend:
          requires: [build-frontend]
      - deploy-frontend-config:
          requires: [deploy-backend, deploy-frontend]

